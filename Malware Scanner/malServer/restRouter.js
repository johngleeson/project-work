/*
 restRouter.js
 Author - John Gleeson

 This file is exposed to malServer.js and requests for the database are routed through here.
 Contains all server logic and also connects with the MHR
 */


var mysql = require("mysql");
var MalwareHashRegistry = require('malware-hash-registry');

/*
  This function is exported and available to malServer.js.
  Passes all arguments straight through to routeHandler()
 */

module.exports =
    function restRouter(router, connection) {
        routeHandler(router, connection);
    };


var mhrClient = new MalwareHashRegistry();


/*
 Prepares queries for the SQL server and contains logic to act on
 the results of these queries.
 */

function routeHandler(router, connection) {

    router.get("/checkboth/:hash/:hostname/:filename", function (request, response) {
        var goodQuery = "SELECT * FROM ?? WHERE ??=?";
        var badQuery = "SELECT * FROM ?? WHERE ??=?";
        var goodTable = ["goodhash", "goodvalue", request.params.hash];
        var badTable = ["badhash", "badvalue", request.params.hash];
        var hostname = request.params.hostname;
        var filename = request.params.filename;

        var digests = [request.params.hash];

        goodQuery = mysql.format(goodQuery, goodTable);
        badQuery = mysql.format(badQuery, badTable);

        //connect to the good database
        connection.query(goodQuery, function (error, results) {
            if (error) {
                console.log(error);
            }

            // if the hash exists in the good hash database
            if (results.length == 1) {
                response.json({
                    "known_good": true,
                    "hash_value": request.params.hash
                });

                console.log('Good file:\n' +
                            'Name: %s\n' +
                            'Hash: %s\n' +
                            'Hostname: %s\n', filename, request.params.hash, hostname);

            // if the hash does not exist on the good hash database
            } else if (results.length == 0) {
                connection.query(badQuery, function (error, results) {
                    if (error) {
                        console.log(error);
                    }
                    // if the hash is on the bad database
                    if (results.length == 1) {
                        console.log('Suspicious file:\n' +
                            'Name: %s\n' +
                            'Hash: %s\n' +
                            'Hostname: %s\n', filename, request.params.hash, hostname);

                        // The Malware Hash Register is queried
                        mhrClient.query(digests, function (err, results) {
                            if (err) {
                                console.error(err);
                                return;
                            }

                            response.json({
                                potentially_bad: true,
                                hash_value: request.params.hash,
                                timestamp: results.timestamp,
                                detectionRate: results.detectionRate
                            });
                        });

                    // if the hash is not on the bad database
                    } else if (results.length == 0) {
                        response.json({
                            "potentially_bad": false,
                            "hash_value": request.params.hash
                        });
                    }
                });
            }
        });
    });
}








